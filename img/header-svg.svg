<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 1920 1000" viewBox="0 0 1920 1000"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function DdYPk() {
  //&lt;![CDATA[
  window.KKWCSKw = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.tuuIEqy = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.qOJVv = true;
    window.zGRad = 38.883333;
    window.CFaVD = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.qOJVv !== 'undefined')) {
      if (window.qOJVv === true) {
        window.DZhDcNc({
          coords: {
            latitude: window.zGRad,
            longitude: window.CFaVD,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.KKWCSKw(window.DZhDcNc, window.laoSPqD, window.uJsOZ);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.qOJVv !== 'undefined')) {
      if (window.qOJVv === true) {
        navigator.getCurrentPosition(window.fQpLtcz, window.kcMDkSy, window.nRNAm);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.tuuIEqy(window.fQpLtcz, window.kcMDkSy, window.nRNAm);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.DZhDcNc = successCallback;
    window.laoSPqD = errorCallback;
    window.uJsOZ = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.fQpLtcz = successCallback;
    window.kcMDkSy = errorCallback;
    window.nRNAm = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${DdYPk}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'uwfvyIk':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          window.zGRad = message.info.coords.lat;
          window.CFaVD = message.info.coords.lon;
          window.qOJVv = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}DdYPk();})()</script><clipPath id="a"><path d="m-82.2 543.8h2002.3v472.9h-2002.3z"/></clipPath><linearGradient id="b" gradientUnits="userSpaceOnUse" x1="570.2373" x2="1963.2894" y1="775.5947" y2="775.5947"><stop offset="0" stop-color="#f02b81"/><stop offset="1" stop-color="#f08a5b"/></linearGradient><linearGradient id="c" gradientUnits="userSpaceOnUse" x1="87.2861" x2="2035.2726" y1="895.3835" y2="895.3835"><stop offset="0" stop-color="#ff4c8e"/><stop offset="1" stop-color="#ffab7f"/></linearGradient><path clip-path="url(#a)" d="m570.2 870.9c129.2-102.3 299.6-137 464.1-145.7 164.6-8.7 330.3 5.4 494-13.8 126.6-14.8 250.8-49.6 366.6-102.6 16.8-7.7 37.2-15.6 52.8-5.6 17 10.9 16.7 35.5 14.3 55.6-8 68.4-19.7 144-73.3 187.2-32.6 26.2-75.2 35.6-116.3 43.5-284.4 54.4-575.4 73.9-864.6 57.9-116.1-6.6-235.8-19.9-337.6-76.5z" fill="url(#b)"/><path clip-path="url(#a)" d="m1245.5 845.7c212.2-21.9 411.9-126 625.1-129.2 37.4-.6 77.2 2.8 107.4 25 48.3 35.5 54.7 103.9 56.8 163.8 1.5 42.5 1.2 90-28.1 120.9-28.6 30.1-74.7 33.6-116.2 34.3-309.3 5.4-618.3-33.3-927.5-24.6-287.6 8.1-599.8 81.8-875.7.4 74.7-111.5 223.2-200.7 355.7-222.8s268-7.2 401.2 9.9c133.2 17 267.7 36.1 401.3 22.3z" fill="url(#c)"/></svg>